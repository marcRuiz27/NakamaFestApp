necesito una db para la aplicacion, donde tendra registrados 30 usuario con user, pwd  y nombre. 
Cuando un usuario descarge la aplicación este tendra que primero hacer un input de user y pwd. entonces la app debera validar esos datos (que tendrá ya registrados) para dejar al usuario continuar

RESPUESTA:
Para implementar una solución con una base de datos para una aplicación React Native que maneje autenticación de usuario, considerando las limitaciones de seguridad y diseño, 
te guiaré a través de un enfoque más estructurado. Esto incluirá el uso de una base de datos remota y un backend para manejar la autenticación, ya que almacenar y validar credenciales en el cliente (la app React Native) no es seguro.

PASO 1: Elegir una base de datos y configurar el backend
Para este escenario, podrías usar Firebase Authentication con Firestore como base de datos, ya que proporcionan una solución completa para la autenticación y almacenamiento de datos con una configuración relativamente sencilla.
Firebase Authentication se encargará de la gestión de usuarios (registro, login, etc.), mientras que Firestore se utilizará para almacenar datos adicionales del usuario, como el nombre.

PASO 2: Configuración de Firebase en tu proyecto React Native

    1) Crea un proyecto en Firebase: Ve a la Consola de Firebase y crea un nuevo proyecto.
    2) Registra tu app en Firebase: Agrega una aplicación de Firebase a tu proyecto y sigue las instrucciones para descargar el archivo de configuración (google-services.json para Android y GoogleService-Info.plist para iOS) y añádelo a tu proyecto React Native.
    3) Instala Firebase y otras dependencias necesarias en tu proyecto React Native:
        "npm install --save @react-native-firebase/app @react-native-firebase/auth @react-native-firebase/firestore"

    4) Configura la autenticación en Firebase: En la consola de Firebase, ve a la sección de autenticación y habilita el método de autenticación que desees utilizar, por ejemplo, autenticación por correo electrónico y contraseña.

PASO 3: Implementar la lógica de autenticación en React Native

    1) Autenticación de usuarios: Utiliza Firebase Authentication para registrar nuevos usuarios y para el login. Por ejemplo, para registrar un nuevo usuario:
        import auth from '@react-native-firebase/auth';

        const registerUser = async (email, password) => {
            try {
                await auth().createUserWithEmailAndPassword(email, password);
                // Aquí puedes redirigir al usuario a la pantalla principal o realizar otras acciones
            } catch (error) {
            console.error(error);
            // Manejo de errores, como mostrar un mensaje al usuario
            }
        };

    2) Validación de usuario al iniciar la app: Después de que el usuario se registre o inicie sesión, puedes verificar si hay una sesión activa al inicio de la app y redirigir al usuario en consecuencia:

        useEffect(() => {
            const subscriber = auth().onAuthStateChanged(onAuthStateChanged);
            return subscriber; // unsubscribe on unmount
        }, []);

        const onAuthStateChanged = (user) => {
            if (user) {
            // Usuario está logueado, puedes obtener más datos del usuario o redirigirlo
            } else {
            // Usuario no está logueado, mostrar pantalla de login o registro
            }
        };

PASO 4: Almacenar y recuperar datos adicionales del usuario con Firestore
Después de autenticar a un usuario, puedes usar Firestore para almacenar y recuperar información adicional como el nombre del usuario. Para ello, podrías crear una colección donde cada documento corresponda a un usuario y tenga campos para almacenar la información relevante.


////////////////////////////////
CONSIDERACIONES DE SEGURIDAD
Recuerda que la autenticación y el manejo de datos sensibles deben hacerse con cuidado:

    - Valida siempre las credenciales en el lado del servidor. Firebase Authentication se encarga de esto por ti.
    - Usa reglas de seguridad en Firestore para asegurar que los datos solo puedan ser leídos o modificados por el usuario correspondiente.
    - Nunca almacenes información sensible como contraseñas en Firestore. Firebase Authentication maneja las contraseñas de manera segura por ti.

Este enfoque te permite tener una aplicación segura y escalable, donde puedes manejar fácilmente más de 30 usuarios, autenticación y almacenamiento de datos adicionales sin comprometer la seguridad.

